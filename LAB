import java.awt.Point;
import java.awt.geom.GeneralPath;

public class ShapeFactory
{
  public java.awt.Shape shape;
  public java.awt.BasicStroke stroke;
  public java.awt.Paint paint;
  public int width = 25;
  public int height = 25;
  
  public ShapeFactory(int shape_type) {
    stroke = new java.awt.BasicStroke(3.0F);
    switch (shape_type / 10) {
    case 1: 
      shape = createStar(3, new Point(0, 0), width / 2.0D, width / 2.0D);
      break;
    case 3: 
      shape = createStar(5, new Point(0, 0), width / 2.0D, width / 4.0D);
      break;
    case 5: 
      shape = new java.awt.geom.Rectangle2D.Double(-width / 2.0D, -height / 2.0D, width, height);
      break;
    case 7: 
      GeneralPath path = new GeneralPath();
      double tmp_height = Math.sqrt(2.0D) / 2.0D * height;
      path.moveTo(-width / 2, -tmp_height);
      path.lineTo(0.0D, -tmp_height);
      path.lineTo(width / 2, tmp_height);
      path.closePath();
      shape = path;
      break;
    case 9: 
      shape = new java.awt.geom.Arc2D.Double(-width / 2.0D, -height / 2.0D, width, height, 30.0D, 300.0D, 
        2);
      break;
    case 2: case 4: case 6: 
    case 8: default: 
      throw new Error("type is nusupported");
    }
    private static void drawingAndDisplay()
    {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.getContentPane().add(new StarPanel());
        f.setSize(600, 600);
        f.setLocationRelativeTo(null);
        f.setVisible(true);
    }

}

class StarPanel extends JPanel
{
    @Override
    protected void paintComponent(Graphics gr)
    {
        super.paintComponent(gr);
        Graphics2D g = (Graphics2D) gr;
        g.setColor(Color.GRAY);
        g.fillRect(0, 0, getWidth(), getHeight());
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

        g.setColor(Color.BLACK);
        g.draw(createSimpleStar(50, 200, 200));

        g.setPaint(Color.GREEN);
        g.fill(drawStar(400, 400, 40, 60, 10, 0));

        g.setPaint(new RadialGradientPaint(
            new Point(400, 200), 60, new float[] { 0, 1 }, 
            new Color[] { Color.RED, Color.YELLOW }));
        g.fill(drawStar(400, 200, 20, 60, 8, 0));

        g.setPaint(new RadialGradientPaint(
            new Point(200, 400), 50, new float[] { 0, 0.3f, 1 }, 
            new Color[] { Color.BLACK, Color.YELLOW, Color.ORANGE }));
        g.fill(drawStar(200, 400, 40, 50, 20, 0));

    }

    private static Shape createSimpleStar(double radius, double koordX, double koordY)
    {
        return drawStar(koordX, koordY, radius, radius * 2.63, 5,
            Math.toRadians(-18));
    }

    private static Shape drawStar(double koordX, double koordY,
        double innerRadius, double outerRadius, int numRays,
        double startAngleR)
    {
        Path2D p = new Path2D.Double();
        double deltaAngleR = Math.PI / numRays;
        for (int i = 0; i < numRays * 2; i++)
        {
            double angleR = startAngleR + i * deltaAngleR;
            double ca = Math.cos(angleR);
            double sa = Math.sin(angleR);
            double relX = ca;
            double relY = sa;
            if ((i & 1) == 0)
            {
                relX *= outerRadius;
                relY *= outerRadius;
            }
            else
            {
                relX *= innerRadius;
                relY *= innerRadius;
            }
            if (i == 0)
            {
                p.moveTo(koordX + relX, koordY + relY);
            }
            else
            
       int = 7;
       int =7;
       
       boolean isAlfa = checkPix(image, x, y);
       
       if (isAlfa) System.out.println("")

    {
      double r = (i & 0x1) == 0 ? rOuter : rInner;
      java.awt.geom.Point2D.Double p = new java.awt.geom.Point2D.Double(x + Math.cos(i * angle) * r, y + Math.sin(i * angle) * r);
      if (i == 0) path.moveTo(p.getX(), p.getY()); else
        path.lineTo(p.getX(), p.getY());
    }
    path.closePath();
    return path;
  }
}
